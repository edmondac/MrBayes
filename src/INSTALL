MrBayes 3.2.7-dev (development version)

Building MrBayes using the GNU autotools (Autoconf and Automake) from a
bare-bones Git clone:

*   Make sure Automake 1.15 is installed.
*   Make sure Autoconf 2.69 is installed.

    The configure.ac script here uses pkg-config for detection of
    external libraries (Beagle) and also uses m4 macros from the
    autoconf-archive collection for deteciton of MPI.  Therefore,

*   Make sure pkg-config >=0.9.0 is installed.
*   Make sure autoconf-archive 2016.03.20 is installed.

*   On some systems that uses metaauto for wrapping multiple versions of
    the GNU autotools:

    $ export AUTOCONF_VERSION=2.69
    $ export AUTOMAKE_VERSION=1.15

*   Run autoreconf to generate the configure script:

    $ autoreconf -i

*   Run configure to create "Makefile" (see "./configure --help" for
    info about enabling and disabling features of MrBayes, or how to
    install in non-standard locations etc.):

    $ ./configure

*   Make the project:

    $ make

Picking up the Beagle library:

Assuming Beagle was compiled and installed in a standard location,
it will be picked up by the configure script automatically (using
the pkg-config tool).  If it isn't found, or the configure script
is run with "--without-beagle", Beagle will not be used.  If Beagle
is installed in a non-default location, point the PKG_CONFIG_PATH
environment variable to the "pkgconfig" directory that Beagle used.

For example, I installed Beagle in my home directory using

    $ ./configure --prefix=$HOME/local
    $ make && make install

This means I will need to point PKG_CONFIG_PATH to
"$HOME/local/lib/pkgconfig" when I build MrBayes:

    $ env PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig ./configure
    [...]
    checking for pkg-config... /usr/bin/pkg-config
    checking pkg-config is at least version 0.9.0... yes
    checking for BEAGLE... yes
    [...]
    $ make && make install

Picking up and using MPI:

By default, the configure script will find any available MPI C compiler
and use it.  This behaviour may be changed by using the "--without-mpi"
flag when running the configure script.  Setting the environment
variable CC to a specific C compiler will also disable MPI support
(unless this compiler happens to be an MPI C compiler).

When running configure, unless "--without-mpi" is used, it will always
say it's going to use MPI, even though no MPI C compiler is available:

    $ ./configure
    [...]
    checking whether to compile using MPI... yes
    [...]

Don't worry, MPI support will not acually be enabled if configure can't
find the MPI libraries and header files:

    [...]
    checking for function MPI_Init... no
    checking for function MPI_Init in -lmpi... no
    checking for function MPI_Init in -lmpich... no
    [...]

